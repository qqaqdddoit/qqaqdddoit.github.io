{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\86133\\\\Desktop\\\\\\u8BB0\\u5F55\\\\react-tetris-ts\\\\src\\\\components\\\\tetris.tsx\";\n// Import React\nimport * as React from 'react'; // Import TetrisBoard component\n\nimport TetrisBoard from './tetris-board'; // Define props for Tetris component\n\n// Create Tetris component\nclass Tetris extends React.Component {\n  constructor(props) {\n    super(props); // Generate board based on number of boardHeight & boardWidth props\n\n    this.handlePauseClick = () => {\n      this.setState(prev => ({\n        isPaused: !prev.isPaused\n      }));\n    };\n\n    this.handleNewGameClick = () => {\n      // Create an empty board\n      let field = [];\n\n      for (let y = 0; y < this.props.boardHeight; y++) {\n        let row = [];\n\n        for (let x = 0; x < this.props.boardWidth; x++) {\n          row.push(0);\n        }\n\n        field.push(row);\n      } // Set starting column to center\n\n\n      let xStart = Math.floor(parseInt(this.props.boardWidth) / 2); // Initialize state with starting conditions\n\n      this.setState({\n        activeTileX: xStart,\n        activeTileY: 1,\n        activeTile: 2,\n        tileRotate: 0,\n        score: 0,\n        level: 1,\n        tileCount: 0,\n        gameOver: false,\n        field: field\n      });\n    };\n\n    let _field = [];\n\n    for (let y = 0; y < props.boardHeight; y++) {\n      let row = [];\n\n      for (let x = 0; x < props.boardWidth; x++) {\n        row.push(0);\n      }\n\n      _field.push(row);\n    } // Set starting column to center\n\n\n    let _xStart = Math.floor(parseInt(props.boardWidth) / 2); // Initialize state with starting conditions\n\n\n    this.state = {\n      activeTileX: _xStart,\n      activeTileY: 1,\n      activeTile: 1,\n      tileRotate: 0,\n      score: 0,\n      level: 1,\n      tileCount: 0,\n      gameOver: false,\n      isPaused: false,\n      field: _field,\n      timerId: null,\n      tiles: [// 7 tiles\n      // Each tile can be rotated 4 times (x/y coordinates)\n      [// The default square\n      [[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]]], [// The cube tile (block 2x2)\n      [[0, 0], [1, 0], [0, 1], [1, 1]], [[0, 0], [1, 0], [0, 1], [1, 1]], [[0, 0], [1, 0], [0, 1], [1, 1]], [[0, 0], [1, 0], [0, 1], [1, 1]]], [// The I tile\n      [[0, -1], [0, 0], [0, 1], [0, 2]], [[-1, 0], [0, 0], [1, 0], [2, 0]], [[0, -1], [0, 0], [0, 1], [0, 2]], [[-1, 0], [0, 0], [1, 0], [2, 0]]], [// The T tile\n      [[0, 0], [-1, 0], [1, 0], [0, -1]], [[0, 0], [1, 0], [0, 1], [0, -1]], [[0, 0], [-1, 0], [1, 0], [0, 1]], [[0, 0], [-1, 0], [0, 1], [0, -1]]], [// The inverse L tile\n      [[0, 0], [-1, 0], [1, 0], [-1, -1]], [[0, 0], [0, 1], [0, -1], [1, -1]], [[0, 0], [1, 0], [-1, 0], [1, 1]], [[0, 0], [0, 1], [0, -1], [-1, 1]]], [// The L tile\n      [[0, 0], [1, 0], [-1, 0], [1, -1]], [[0, 0], [0, 1], [0, -1], [1, 1]], [[0, 0], [1, 0], [-1, 0], [-1, 1]], [[0, 0], [0, 1], [0, -1], [-1, -1]]], [// The Z tile\n      [[0, 0], [1, 0], [0, -1], [-1, -1]], [[0, 0], [1, 0], [0, 1], [1, -1]], [[0, 0], [1, 0], [0, -1], [-1, -1]], [[0, 0], [1, 0], [0, 1], [1, -1]]], [// The inverse Z tile\n      [[0, 0], [-1, 0], [0, -1], [1, -1]], [[0, 0], [0, -1], [1, 0], [1, 1]], [[0, 0], [-1, 0], [0, -1], [1, -1]], [[0, 0], [0, -1], [1, 0], [1, 1]]]]\n    };\n  }\n  /**\r\n   * @description Sets timer after component mounts\r\n   * Uses level (this.state.level) to determine the timeout (game speed)\r\n   * and executes handleBoardUpdate() set to 'down' method during each interval\r\n   * @memberof Tetris\r\n   */\n\n\n  componentDidMount() {\n    let timerId;\n    timerId = window.setInterval(() => this.handleBoardUpdate('down'), 1000 - (this.state.level * 10 > 600 ? 600 : this.state.level * 10));\n    this.setState({\n      timerId: timerId\n    });\n  }\n  /**\r\n   * @description Resets the timer when component unmounts\r\n   * @memberof Tetris\r\n   */\n\n\n  componentWillUnmount() {\n    window.clearInterval(this.state.timerId);\n  }\n  /**\r\n   * @description Handles board updates\r\n   * @param {string} command\r\n   * @memberof Tetris\r\n   */\n\n\n  handleBoardUpdate(command) {\n    // Do nothing if game ends, or is paused\n    if (this.state.gameOver || this.state.isPaused) {\n      return;\n    } // Prepare variables for additions to x/y coordinates, current active tile and new rotation\n\n\n    let xAdd = 0;\n    let yAdd = 0;\n    let rotateAdd = 0;\n    let tile = this.state.activeTile; // If tile should move to the left\n    // set xAdd to -1\n\n    if (command === 'left') {\n      xAdd = -1;\n    } // If tile should move to the right\n    // set xAdd to 1\n\n\n    if (command === 'right') {\n      xAdd = 1;\n    } // If tile should be rotated\n    // set rotateAdd to 1\n\n\n    if (command === 'rotate') {\n      rotateAdd = 1;\n    } // If tile should fall faster\n    // set yAdd to 1\n\n\n    if (command === 'down') {\n      yAdd = 1;\n    } // Get current x/y coordinates, active tile, rotate and all tiles\n\n\n    let field = this.state.field;\n    let x = this.state.activeTileX;\n    let y = this.state.activeTileY;\n    let rotate = this.state.tileRotate;\n    const tiles = this.state.tiles; // Remove actual tile from field to test for new insert position\n\n    field[y + tiles[tile][rotate][0][1]][x + tiles[tile][rotate][0][0]] = 0;\n    field[y + tiles[tile][rotate][1][1]][x + tiles[tile][rotate][1][0]] = 0;\n    field[y + tiles[tile][rotate][2][1]][x + tiles[tile][rotate][2][0]] = 0;\n    field[y + tiles[tile][rotate][3][1]][x + tiles[tile][rotate][3][0]] = 0; // Test if the move can be executed on actual field\n\n    let xAddIsValid = true; // Test if tile should move horizontally\n\n    if (xAdd !== 0) {\n      for (let i = 0; i <= 3; i++) {\n        // Test if tile can be moved without getting outside the board\n        if (x + xAdd + tiles[tile][rotate][i][0] >= 0 && x + xAdd + tiles[tile][rotate][i][0] < this.props.boardWidth) {\n          if (field[y + tiles[tile][rotate][i][1]][x + xAdd + tiles[tile][rotate][i][0]] !== 0) {\n            // Prevent the move\n            xAddIsValid = false;\n          }\n        } else {\n          // Prevent the move\n          xAddIsValid = false;\n        }\n      }\n    } // If horizontal move is valid update x variable (move the tile)\n\n\n    if (xAddIsValid) {\n      x += xAdd;\n    } // Try to rotate the tile\n\n\n    let newRotate = rotate + rotateAdd > 3 ? 0 : rotate + rotateAdd;\n    let rotateIsValid = true; // Test if tile should rotate\n\n    if (rotateAdd !== 0) {\n      for (let i = 0; i <= 3; i++) {\n        // Test if tile can be rotated without getting outside the board\n        if (x + tiles[tile][newRotate][i][0] >= 0 && x + tiles[tile][newRotate][i][0] < this.props.boardWidth && y + tiles[tile][newRotate][i][1] >= 0 && y + tiles[tile][newRotate][i][1] < this.props.boardHeight) {\n          // Test of tile rotation is not blocked by other tiles\n          if (field[y + tiles[tile][newRotate][i][1]][x + tiles[tile][newRotate][i][0]] !== 0) {\n            // Prevent rotation\n            rotateIsValid = false;\n          }\n        } else {\n          // Prevent rotation\n          rotateIsValid = false;\n        }\n      }\n    } // If rotation is valid update rotate variable (rotate the tile)\n\n\n    if (rotateIsValid) {\n      rotate = newRotate;\n    } // Try to speed up the fall of the tile\n\n\n    let yAddIsValid = true; // Test if tile should fall faster\n\n    if (yAdd !== 0) {\n      for (let i = 0; i <= 3; i++) {\n        // Test if tile can fall faster without getting outside the board\n        if (y + yAdd + tiles[tile][rotate][i][1] >= 0 && y + yAdd + tiles[tile][rotate][i][1] < this.props.boardHeight) {\n          // Test if faster fall is not blocked by other tiles\n          if (field[y + yAdd + tiles[tile][rotate][i][1]][x + tiles[tile][rotate][i][0]] !== 0) {\n            // Prevent faster fall\n            yAddIsValid = false;\n          }\n        } else {\n          // Prevent faster fall\n          yAddIsValid = false;\n        }\n      }\n    } // If speeding up the fall is valid (move the tile down faster)\n\n\n    if (yAddIsValid) {\n      y += yAdd;\n    } // Render the tile at new position\n\n\n    field[y + tiles[tile][rotate][0][1]][x + tiles[tile][rotate][0][0]] = tile;\n    field[y + tiles[tile][rotate][1][1]][x + tiles[tile][rotate][1][0]] = tile;\n    field[y + tiles[tile][rotate][2][1]][x + tiles[tile][rotate][2][0]] = tile;\n    field[y + tiles[tile][rotate][3][1]][x + tiles[tile][rotate][3][0]] = tile; // If moving down is not possible, remove completed rows add score\n    // and find next tile and check if game is over\n\n    if (!yAddIsValid) {\n      for (let row = this.props.boardHeight - 1; row >= 0; row--) {\n        let isLineComplete = true; // Check if row is completed\n\n        for (let col = 0; col < this.props.boardWidth; col++) {\n          if (field[row][col] === 0) {\n            isLineComplete = false;\n          }\n        } // Remove completed rows\n\n\n        if (isLineComplete) {\n          for (let yRowSrc = row; row > 0; row--) {\n            for (let col = 0; col < this.props.boardWidth; col++) {\n              field[row][col] = field[row - 1][col];\n            }\n          } // Check if the row is the last\n\n\n          row = this.props.boardHeight;\n        }\n      } // Update state - update score, update number of tiles, change level\n\n\n      this.setState(prev => ({\n        score: prev.score + 1 * prev.level,\n        tileCount: prev.tileCount + 1,\n        level: 1 + Math.floor(prev.tileCount / 10)\n      })); // Prepare new timer\n\n      let timerId; // Reset the timer\n\n      clearInterval(this.state.timerId); // Update new timer\n\n      timerId = setInterval(() => this.handleBoardUpdate('down'), 1000 - (this.state.level * 10 > 600 ? 600 : this.state.level * 10)); // Use new timer\n\n      this.setState({\n        timerId: timerId\n      }); // Create new tile\n\n      tile = Math.floor(Math.random() * 7 + 1);\n      x = parseInt(this.props.boardWidth) / 2;\n      y = 1;\n      rotate = 0; // Test if game is over - test if new tile can't be placed in field\n\n      if (field[y + tiles[tile][rotate][0][1]][x + tiles[tile][rotate][0][0]] !== 0 || field[y + tiles[tile][rotate][1][1]][x + tiles[tile][rotate][1][0]] !== 0 || field[y + tiles[tile][rotate][2][1]][x + tiles[tile][rotate][2][0]] !== 0 || field[y + tiles[tile][rotate][3][1]][x + tiles[tile][rotate][3][0]] !== 0) {\n        // Stop the game\n        this.setState({\n          gameOver: true\n        });\n      } else {\n        // Otherwise, render new tile and continue\n        field[y + tiles[tile][rotate][0][1]][x + tiles[tile][rotate][0][0]] = tile;\n        field[y + tiles[tile][rotate][1][1]][x + tiles[tile][rotate][1][0]] = tile;\n        field[y + tiles[tile][rotate][2][1]][x + tiles[tile][rotate][2][0]] = tile;\n        field[y + tiles[tile][rotate][3][1]][x + tiles[tile][rotate][3][0]] = tile;\n      }\n    } // Update state - use new field, active x/y coordinates, rotation and activeTile\n\n\n    this.setState({\n      field: field,\n      activeTileX: x,\n      activeTileY: y,\n      tileRotate: rotate,\n      activeTile: tile\n    });\n  }\n  /**\r\n   * @description Stops and resumes the game\r\n   * @memberof Tetris\r\n   */\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"tetris\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    }, React.createElement(TetrisBoard, {\n      field: this.state.field,\n      gameOver: this.state.gameOver,\n      score: this.state.score,\n      level: this.state.level,\n      rotate: this.state.tileRotate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"tetris__block-controls\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: () => this.handleBoardUpdate('left'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453\n      },\n      __self: this\n    }, \"Left\"), React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: () => this.handleBoardUpdate('down'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455\n      },\n      __self: this\n    }, \"Down\"), React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: () => this.handleBoardUpdate('right'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }, \"Right\"), React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: () => this.handleBoardUpdate('rotate'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    }, \"Rotate\")), React.createElement(\"div\", {\n      className: \"tetris__game-controls\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: this.handleNewGameClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }, \"New Game\"), React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: this.handlePauseClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    }, this.state.isPaused ? 'Resume' : 'Pause')));\n  }\n\n}\n\nexport default Tetris;","map":{"version":3,"sources":["C:\\Users\\86133\\Desktop\\记录\\react-tetris-ts\\src\\components\\tetris.tsx"],"names":["React","TetrisBoard","Tetris","Component","constructor","props","handlePauseClick","setState","prev","isPaused","handleNewGameClick","field","y","boardHeight","row","x","boardWidth","push","xStart","Math","floor","parseInt","activeTileX","activeTileY","activeTile","tileRotate","score","level","tileCount","gameOver","state","timerId","tiles","componentDidMount","window","setInterval","handleBoardUpdate","componentWillUnmount","clearInterval","command","xAdd","yAdd","rotateAdd","tile","rotate","xAddIsValid","i","newRotate","rotateIsValid","yAddIsValid","isLineComplete","col","yRowSrc","random","render"],"mappings":"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","sourcesContent":["// Import React\r\nimport * as React from 'react'\r\n\r\n// Import TetrisBoard component\r\nimport TetrisBoard from './tetris-board'\r\n\r\n// Define props for Tetris component\r\ntype TetrisProps = {\r\n  boardWidth: any,\r\n  boardHeight: any\r\n}\r\n\r\n// Define props for Tetris component state\r\ntype TetrisState = {\r\n  activeTileX: number,\r\n  activeTileY: number,\r\n  activeTile: number,\r\n  tileRotate: number,\r\n  score: number,\r\n  level: number,\r\n  tileCount: number,\r\n  gameOver: boolean,\r\n  isPaused: boolean,\r\n  field: any[],\r\n  timerId: any,\r\n  tiles: number[][][][]\r\n}\r\n\r\n// Create Tetris component\r\nclass Tetris extends React.Component<TetrisProps, TetrisState> {\r\n  constructor(props: any) {\r\n    super(props)\r\n\r\n    // Generate board based on number of boardHeight & boardWidth props\r\n    let field = []\r\n\r\n    for (let y = 0; y < props.boardHeight; y++) {\r\n      let row = []\r\n\r\n      for (let x = 0; x < props.boardWidth; x++) {\r\n        row.push(0)\r\n      }\r\n\r\n      field.push(row)\r\n    }\r\n\r\n    // Set starting column to center\r\n    let xStart = Math.floor(parseInt(props.boardWidth) / 2)\r\n\r\n    // Initialize state with starting conditions\r\n    this.state = {\r\n      activeTileX: xStart,\r\n      activeTileY: 1,\r\n      activeTile: 1,\r\n      tileRotate: 0,\r\n      score: 0,\r\n      level: 1,\r\n      tileCount: 0,\r\n      gameOver: false,\r\n      isPaused: false,\r\n      field: field,\r\n      timerId: null,\r\n      tiles: [\r\n        // 7 tiles\r\n        // Each tile can be rotated 4 times (x/y coordinates)\r\n        [\r\n          // The default square\r\n          [[0, 0], [0, 0], [0, 0], [0, 0]],\r\n          [[0, 0], [0, 0], [0, 0], [0, 0]],\r\n          [[0, 0], [0, 0], [0, 0], [0, 0]],\r\n          [[0, 0], [0, 0], [0, 0], [0, 0]]\r\n        ],\r\n        [\r\n          // The cube tile (block 2x2)\r\n          [[0, 0], [1, 0], [0, 1], [1, 1]],\r\n          [[0, 0], [1, 0], [0, 1], [1, 1]],\r\n          [[0, 0], [1, 0], [0, 1], [1, 1]],\r\n          [[0, 0], [1, 0], [0, 1], [1, 1]]\r\n        ],\r\n        [\r\n          // The I tile\r\n          [[0, -1], [0, 0], [0, 1], [0, 2]],\r\n          [[-1, 0], [0, 0], [1, 0], [2, 0]],\r\n          [[0, -1], [0, 0], [0, 1], [0, 2]],\r\n          [[-1, 0], [0, 0], [1, 0], [2, 0]]\r\n        ],\r\n        [\r\n          // The T tile\r\n          [[0, 0], [-1, 0], [1, 0], [0, -1]],\r\n          [[0, 0], [1, 0], [0, 1], [0, -1]],\r\n          [[0, 0], [-1, 0], [1, 0], [0, 1]],\r\n          [[0, 0], [-1, 0], [0, 1], [0, -1]]\r\n        ],\r\n        [\r\n          // The inverse L tile\r\n          [[0, 0], [-1, 0], [1, 0], [-1, -1]],\r\n          [[0, 0], [0, 1], [0, -1], [1, -1]],\r\n          [[0, 0], [1, 0], [-1, 0], [1, 1]],\r\n          [[0, 0], [0, 1], [0, -1], [-1, 1]]\r\n        ],\r\n        [\r\n          // The L tile\r\n          [[0, 0], [1, 0], [-1, 0], [1, -1]],\r\n          [[0, 0], [0, 1], [0, -1], [1, 1]],\r\n          [[0, 0], [1, 0], [-1, 0], [-1, 1]],\r\n          [[0, 0], [0, 1], [0, -1], [-1, -1]]\r\n        ],\r\n        [\r\n          // The Z tile\r\n          [[0, 0], [1, 0], [0, -1], [-1, -1]],\r\n          [[0, 0], [1, 0], [0, 1], [1, -1]],\r\n          [[0, 0], [1, 0], [0, -1], [-1, -1]],\r\n          [[0, 0], [1, 0], [0, 1], [1, -1]]\r\n        ],\r\n        [\r\n          // The inverse Z tile\r\n          [[0, 0], [-1, 0], [0, -1], [1, -1]],\r\n          [[0, 0], [0, -1], [1, 0], [1, 1]],\r\n          [[0, 0], [-1, 0], [0, -1], [1, -1]],\r\n          [[0, 0], [0, -1], [1, 0], [1, 1]]\r\n        ]\r\n      ]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description Sets timer after component mounts\r\n   * Uses level (this.state.level) to determine the timeout (game speed)\r\n   * and executes handleBoardUpdate() set to 'down' method during each interval\r\n   * @memberof Tetris\r\n   */\r\n  componentDidMount() {\r\n    let timerId\r\n\r\n    timerId = window.setInterval(\r\n      () => this.handleBoardUpdate('down'),\r\n      1000 - (this.state.level * 10 > 600 ? 600 : this.state.level * 10)\r\n    )\r\n\r\n    this.setState({\r\n      timerId: timerId\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @description Resets the timer when component unmounts\r\n   * @memberof Tetris\r\n   */\r\n  componentWillUnmount() {\r\n    window.clearInterval(this.state.timerId)\r\n  }\r\n\r\n  /**\r\n   * @description Handles board updates\r\n   * @param {string} command\r\n   * @memberof Tetris\r\n   */\r\n  handleBoardUpdate(command: string) {\r\n    // Do nothing if game ends, or is paused\r\n    if (this.state.gameOver || this.state.isPaused) {\r\n      return\r\n    }\r\n\r\n    // Prepare variables for additions to x/y coordinates, current active tile and new rotation\r\n    let xAdd = 0\r\n    let yAdd = 0\r\n    let rotateAdd = 0\r\n    let tile = this.state.activeTile\r\n\r\n    // If tile should move to the left\r\n    // set xAdd to -1\r\n    if (command === 'left') {\r\n      xAdd = -1\r\n    }\r\n\r\n    // If tile should move to the right\r\n    // set xAdd to 1\r\n    if (command === 'right') {\r\n      xAdd = 1\r\n    }\r\n\r\n    // If tile should be rotated\r\n    // set rotateAdd to 1\r\n    if (command === 'rotate') {\r\n      rotateAdd = 1\r\n    }\r\n\r\n    // If tile should fall faster\r\n    // set yAdd to 1\r\n    if (command === 'down') {\r\n      yAdd = 1\r\n    }\r\n\r\n    // Get current x/y coordinates, active tile, rotate and all tiles\r\n    let field = this.state.field\r\n    let x = this.state.activeTileX\r\n    let y = this.state.activeTileY\r\n    let rotate = this.state.tileRotate\r\n\r\n    const tiles = this.state.tiles\r\n\r\n    // Remove actual tile from field to test for new insert position\r\n    field[y + tiles[tile][rotate][0][1]][x + tiles[tile][rotate][0][0]] = 0\r\n    field[y + tiles[tile][rotate][1][1]][x + tiles[tile][rotate][1][0]] = 0\r\n    field[y + tiles[tile][rotate][2][1]][x + tiles[tile][rotate][2][0]] = 0\r\n    field[y + tiles[tile][rotate][3][1]][x + tiles[tile][rotate][3][0]] = 0\r\n\r\n    // Test if the move can be executed on actual field\r\n    let xAddIsValid = true\r\n\r\n    // Test if tile should move horizontally\r\n    if (xAdd !== 0) {\r\n      for (let i = 0; i <= 3; i++) {\r\n        // Test if tile can be moved without getting outside the board\r\n        if (\r\n          x + xAdd + tiles[tile][rotate][i][0] >= 0\r\n          && x + xAdd + tiles[tile][rotate][i][0] < this.props.boardWidth\r\n        ) {\r\n          if (field[y + tiles[tile][rotate][i][1]][x + xAdd + tiles[tile][rotate][i][0]] !== 0) {\r\n            // Prevent the move\r\n            xAddIsValid = false\r\n          }\r\n        } else {\r\n          // Prevent the move\r\n          xAddIsValid = false\r\n        }\r\n      }\r\n    }\r\n\r\n    // If horizontal move is valid update x variable (move the tile)\r\n    if (xAddIsValid) {\r\n      x += xAdd\r\n    }\r\n\r\n    // Try to rotate the tile\r\n    let newRotate = rotate + rotateAdd > 3 ? 0 : rotate + rotateAdd\r\n    let rotateIsValid = true\r\n\r\n    // Test if tile should rotate\r\n    if (rotateAdd !== 0) {\r\n      for (let i = 0; i <= 3; i++) {\r\n        // Test if tile can be rotated without getting outside the board\r\n        if (\r\n          x + tiles[tile][newRotate][i][0] >= 0 &&\r\n          x + tiles[tile][newRotate][i][0] < this.props.boardWidth &&\r\n          y + tiles[tile][newRotate][i][1] >= 0 &&\r\n          y + tiles[tile][newRotate][i][1] < this.props.boardHeight\r\n        ) {\r\n          // Test of tile rotation is not blocked by other tiles\r\n          if (\r\n            field[y + tiles[tile][newRotate][i][1]][\r\n              x + tiles[tile][newRotate][i][0]\r\n            ] !== 0\r\n          ) {\r\n            // Prevent rotation\r\n            rotateIsValid = false\r\n          }\r\n        } else {\r\n          // Prevent rotation\r\n          rotateIsValid = false\r\n        }\r\n      }\r\n    }\r\n\r\n    // If rotation is valid update rotate variable (rotate the tile)\r\n    if (rotateIsValid) {\r\n      rotate = newRotate\r\n    }\r\n\r\n    // Try to speed up the fall of the tile\r\n    let yAddIsValid = true\r\n\r\n    // Test if tile should fall faster\r\n    if (yAdd !== 0) {\r\n      for (let i = 0; i <= 3; i++) {\r\n        // Test if tile can fall faster without getting outside the board\r\n        if (\r\n          y + yAdd + tiles[tile][rotate][i][1] >= 0 &&\r\n          y + yAdd + tiles[tile][rotate][i][1] < this.props.boardHeight\r\n        ) {\r\n          // Test if faster fall is not blocked by other tiles\r\n          if (\r\n            field[y + yAdd + tiles[tile][rotate][i][1]][\r\n              x + tiles[tile][rotate][i][0]\r\n            ] !== 0\r\n          ) {\r\n            // Prevent faster fall\r\n            yAddIsValid = false\r\n          }\r\n        } else {\r\n          // Prevent faster fall\r\n          yAddIsValid = false\r\n        }\r\n      }\r\n    }\r\n\r\n    // If speeding up the fall is valid (move the tile down faster)\r\n    if (yAddIsValid) {\r\n      y += yAdd\r\n    }\r\n\r\n    // Render the tile at new position\r\n    field[y + tiles[tile][rotate][0][1]][x + tiles[tile][rotate][0][0]] = tile\r\n    field[y + tiles[tile][rotate][1][1]][x + tiles[tile][rotate][1][0]] = tile\r\n    field[y + tiles[tile][rotate][2][1]][x + tiles[tile][rotate][2][0]] = tile\r\n    field[y + tiles[tile][rotate][3][1]][x + tiles[tile][rotate][3][0]] = tile\r\n\r\n    // If moving down is not possible, remove completed rows add score\r\n    // and find next tile and check if game is over\r\n    if (!yAddIsValid) {\r\n      for (let row = this.props.boardHeight - 1; row >= 0; row--) {\r\n        let isLineComplete = true\r\n\r\n        // Check if row is completed\r\n        for (let col = 0; col < this.props.boardWidth; col++) {\r\n          if (field[row][col] === 0) {\r\n            isLineComplete = false\r\n          }\r\n        }\r\n\r\n        // Remove completed rows\r\n        if (isLineComplete) {\r\n          for (let yRowSrc = row; row > 0; row--) {\r\n            for (let col = 0; col < this.props.boardWidth; col++) {\r\n              field[row][col] = field[row - 1][col]\r\n            }\r\n          }\r\n\r\n          // Check if the row is the last\r\n          row = this.props.boardHeight\r\n        }\r\n      }\r\n\r\n      // Update state - update score, update number of tiles, change level\r\n      this.setState(prev => ({\r\n        score: prev.score + 1 * prev.level,\r\n        tileCount: prev.tileCount + 1,\r\n        level: 1 + Math.floor(prev.tileCount / 10)\r\n      }))\r\n\r\n      // Prepare new timer\r\n      let timerId\r\n\r\n      // Reset the timer\r\n      clearInterval(this.state.timerId)\r\n\r\n      // Update new timer\r\n      timerId = setInterval(\r\n        () => this.handleBoardUpdate('down'),\r\n        1000 - (this.state.level * 10 > 600 ? 600 : this.state.level * 10)\r\n      )\r\n\r\n      // Use new timer\r\n      this.setState({\r\n        timerId: timerId\r\n      })\r\n\r\n      // Create new tile\r\n      tile = Math.floor(Math.random() * 7 + 1)\r\n      x = parseInt(this.props.boardWidth) / 2\r\n      y = 1\r\n      rotate = 0\r\n\r\n      // Test if game is over - test if new tile can't be placed in field\r\n      if (\r\n        field[y + tiles[tile][rotate][0][1]][x + tiles[tile][rotate][0][0]] !== 0 ||\r\n        field[y + tiles[tile][rotate][1][1]][x + tiles[tile][rotate][1][0]] !== 0 ||\r\n        field[y + tiles[tile][rotate][2][1]][x + tiles[tile][rotate][2][0]] !== 0 ||\r\n        field[y + tiles[tile][rotate][3][1]][x + tiles[tile][rotate][3][0]] !== 0\r\n      ) {\r\n        // Stop the game\r\n        this.setState({\r\n          gameOver: true\r\n        })\r\n      } else {\r\n        // Otherwise, render new tile and continue\r\n        field[y + tiles[tile][rotate][0][1]][x + tiles[tile][rotate][0][0]] = tile\r\n        field[y + tiles[tile][rotate][1][1]][x + tiles[tile][rotate][1][0]] = tile\r\n        field[y + tiles[tile][rotate][2][1]][x + tiles[tile][rotate][2][0]] = tile\r\n        field[y + tiles[tile][rotate][3][1]][x + tiles[tile][rotate][3][0]] = tile\r\n      }\r\n    }\r\n\r\n    // Update state - use new field, active x/y coordinates, rotation and activeTile\r\n    this.setState({\r\n      field: field,\r\n      activeTileX: x,\r\n      activeTileY: y,\r\n      tileRotate: rotate,\r\n      activeTile: tile\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @description Stops and resumes the game\r\n   * @memberof Tetris\r\n   */\r\n  handlePauseClick = () => {\r\n    this.setState(prev => ({\r\n      isPaused: !prev.isPaused\r\n    }))\r\n  }\r\n\r\n  /**\r\n   * @description Resets the game\r\n   * @memberof Tetris\r\n   */\r\n  handleNewGameClick = () => {\r\n    // Create an empty board\r\n    let field: any[] = []\r\n\r\n    for (let y = 0; y < this.props.boardHeight; y++) {\r\n      let row = []\r\n\r\n      for (let x = 0; x < this.props.boardWidth; x++) {\r\n        row.push(0)\r\n      }\r\n\r\n      field.push(row)\r\n    }\r\n\r\n    // Set starting column to center\r\n    let xStart = Math.floor(parseInt(this.props.boardWidth) / 2)\r\n\r\n    // Initialize state with starting conditions\r\n    this.setState({\r\n      activeTileX: xStart,\r\n      activeTileY: 1,\r\n      activeTile: 2,\r\n      tileRotate: 0,\r\n      score: 0,\r\n      level: 1,\r\n      tileCount: 0,\r\n      gameOver: false,\r\n      field: field\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"tetris\">\r\n        {/* Tetris board */}\r\n        <TetrisBoard\r\n          field={this.state.field}\r\n          gameOver={this.state.gameOver}\r\n          score={this.state.score}\r\n          level={this.state.level}\r\n          rotate={this.state.tileRotate}\r\n        />\r\n\r\n        {/* Buttons to control blocks */}\r\n        <div className='tetris__block-controls'>\r\n          <button className=\"btn\" onClick={() => this.handleBoardUpdate('left')}>Left</button>\r\n\r\n          <button className=\"btn\" onClick={() => this.handleBoardUpdate('down')}>Down</button>\r\n\r\n          <button className=\"btn\" onClick={() => this.handleBoardUpdate('right')}>Right</button>\r\n\r\n          <button className=\"btn\" onClick={() => this.handleBoardUpdate('rotate')}>Rotate</button>\r\n        </div>\r\n\r\n        {/* Buttons to control game */}\r\n        <div className=\"tetris__game-controls\">\r\n          <button className=\"btn\" onClick={this.handleNewGameClick}>New Game</button>\r\n\r\n          <button className=\"btn\" onClick={this.handlePauseClick}>{this.state.isPaused ? 'Resume' : 'Pause'}</button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Tetris\r\n"]},"metadata":{},"sourceType":"module"}